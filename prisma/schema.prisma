generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  name             String?
  username         String         @unique
  password         String
  bio              String?
  profileImage     String?
  coverImage       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isProfilePrivate Boolean?       @default(false)
  Album            Album[]
  AlbumComment     AlbumComment[]
  AlbumLike        AlbumLike[]
  createdCircles   Circle[]
  comments         Comment[]
  following        Follow[]       @relation("Follower")
  followers        Follow[]       @relation("Following")
  likes            Like[]
  memberships      Membership[]
  posts            Post[]
  settings         UserSettings?
  activities       Activity[]
}

model Circle {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  avatar      String?
  coverImage  String?
  isPrivate   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   Int
  Album       Album[]
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members     Membership[]
  posts       Post[]
  activities  Activity[]

  @@index([creatorId])
}

model Membership {
  id        Int      @id @default(autoincrement())
  userId    Int
  circleId  Int
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  circle    Circle   @relation(fields: [circleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, circleId])
  @@index([userId])
  @@index([circleId])
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  imageUrl  String?
  videoUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  circleId  Int
  comments  Comment[]
  likes     Like[]
  circle    Circle    @relation(fields: [circleId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([circleId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Album {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?
  coverImage   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isPrivate    Boolean        @default(false)
  creatorId    Int?
  circleId     Int?
  Circle       Circle?        @relation(fields: [circleId], references: [id], onDelete: Cascade)
  creator      User?          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  AlbumComment AlbumComment[]
  AlbumLike    AlbumLike[]
  Photo        Photo[]

  @@index([creatorId])
  @@index([circleId])
}

model UserSettings {
  id                   Int      @id @default(autoincrement())
  userId               Int      @unique
  darkMode             Boolean  @default(true)
  highContrast         Boolean  @default(false)
  fontSize             String   @default("medium")
  defaultAlbumPrivacy  Boolean  @default(true)
  muteAlbumContent     Boolean  @default(false)
  muteAlbumComments    Boolean  @default(false)
  enableNotifications  Boolean  @default(true)
  notifyNewMessages    Boolean  @default(true)
  notifyFriendRequests Boolean  @default(true)
  notifyCircleInvites  Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AlbumComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    Int
  albumId   Int
  Album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([albumId])
  @@index([userId])
}

model AlbumLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  albumId   Int
  Album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, albumId])
  @@index([albumId])
  @@index([userId])
}

model Photo {
  id          Int      @id @default(autoincrement())
  url         String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  albumId     Int
  Album       Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([albumId])
}

model Activity {
  id        Int      @id @default(autoincrement())
  type      String // e.g., "like", "comment", "follow", "circle_invite", "friend_request"
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  circleId  Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  circle    Circle?  @relation(fields: [circleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([circleId])
}

enum Role {
  MEMBER
  MODERATOR
  ADMIN
}
